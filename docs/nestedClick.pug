extends .default

block append head
    script(src="../external/knockout-fast-foreach.min.js")
    style(type="text/css").
        li, span, b, a {display: inline-block; padding: 2px 4px; border: 1px solid orange}


block content
    div#vm1
        h2 Click test (see console)
            //- button(data-bind="click: enabled.toggle") Toggle container (just for disposal tests)

        div(data-bind="if: enabled")
            ul(data-bind="foreach: objectList, " +
                         "nestedClick: {x: onXClassClicked, '.y span': onSpanClicked, y: onYClassClicked, 'a ': onAClicked}," +
                         "nestedContextMenu: {x: onXClassCtxClicked, '.y span': onSpanCtxClicked, y: onYClassCtxClicked, 'a ': onACtxClicked}")
                li: a.x a.x
                    b.y
                        | b.y
                        span(style="color: red") nested span
                        | still b.y of <!-- ko text: val --><!-- /ko -->

            h5 Logs:
            ol(data-bind="foreach: logs"): li(data-bind="text: $data")

    h2 Speed comparison: per-element `click` binding vs. `nestedClick` on parent
    table#vm2(border=1)
        thead: tr
            th: button(data-bind="click: renderClassic") Render using per-LI click binding
            th: button(data-bind="click: renderWithNestedClick") Render using renderWithNestedClick-binding on UL
        tbody: tr
            td(data-bind="if: numbersClassic().length")
                ul(data-bind="fastForEach: numbersClassic")
                    li(data-bind="click: $parent.clickMe")
                        <!-- ko text: $data --><!-- /ko -->
                        <!-- ko if: ($index() === $root.LAST_INDEX) && $root.endRender() -->last<!-- /ko -->
            td(data-bind="if: numbersWithNestedClick().length")
                ul(data-bind="fastForEach: numbersWithNestedClick, nestedClick: {xxx: clickMe}")
                    li.xxx
                        <!-- ko text: $data --><!-- /ko -->
                        <!-- ko if: ($index() === $root.LAST_INDEX) && $root.endRender() -->last<!-- /ko -->


    script(type="module").
        import {ko} from '../lib/libs.js';
        import '../lib/koNestedClickBinding.js';
        import '../lib/koTogglableExtender.js';

        function VM1() {
            this.objectList = ko.observableArray(new Array(10).fill(0).map((foo, i) => ({val: '#' + i})));

            this.enabled = ko.observable(true).extend({togglable: true});

            this.logs = ko.observableArray();

            this.onAClicked = (ctx) => this.logs.push('A clicked -> ' + ctx.val);

            this.onYClassClicked = (ctx) => this.logs.push('.y clicked -> ' + ctx.val);

            this.onSpanClicked = (ctx) => this.logs.push('span in .y clicked -> ' + ctx.val);

            this.onXClassClicked = (ctx) => this.logs.push('.x clicked -> ' + ctx.val);

            this.onACtxClicked = (ctx) => this.logs.push('A CONTEXTMENU-clicked -> ' + ctx.val);

            this.onYClassCtxClicked = (ctx) => this.logs.push('.y CONTEXTMENU-clicked -> ' + ctx.val);

            this.onSpanCtxClicked = (ctx) => this.logs.push('span in .y CONTEXTMENU-clicked -> ' + ctx.val);

            this.onXClassCtxClicked = (ctx) => this.logs.push('.x CONTEXTMENU-clicked -> ' + ctx.val);
        }

        function VM2() {
            this.LAST_INDEX = 9999;

            let _numbers = new Array(this.LAST_INDEX + 1).fill(0).map((foo, i) => i),
                _startTime;

            this.numbersClassic = ko.observableArray();
            this.numbersWithNestedClick = ko.observableArray();

            this._prepareRender = () => {
                this.numbersClassic([]);
                _startTime = Date.now();
            }

            this.renderClassic = () => {
                this._prepareRender();
                this.numbersClassic(_numbers);
            }

            this.renderWithNestedClick = () => {
                this._prepareRender();
                this.numbersWithNestedClick(_numbers);
            }

            this.clickMe = (val) => alert(val);

            this.endRender = () => {
                alert('Render finished after ' + (Date.now() - _startTime) + ' millis');
            }
        }

        ko.applyBindings(new VM1(), document.getElementById('vm1'));
        ko.applyBindings(new VM2(), document.getElementById('vm2'));